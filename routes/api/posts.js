const express = require("express");
const router = express.Router(); //router is an instance of express.Router()
const mongoose = require("mongoose");
const passport = require("passport"); // verifies token.

// Post model
const Post = require("../../models/Post");// modles is the schema made and we r importing it here. new post is added as per the schema in 'models'
// Profile model
const Profile = require("../../models/Profile");// import profile schema bcos we have to find who liked n commented on our posts

// Validation
const validatePostInput = require("../../validation/post");  // validate posts

//@route    GET api/posts
//@desc     Test route //desc means description
//@access   Public //@ access is a public route defined for testing
router.get("/test", (req, res) => res.send("Posts route")); /* this is simply a get request to check if route is working or not.
here router is an instance of library express. arrow function used here. req res is request n response. the name of the route is test.*/

// @route   GET api/posts  // this is the format of route's description
// @desc    Get posts  
// @access  Public
router.get("/", (req, res) => {  
  Post.find()
    .sort({ date: -1 }) //this will return posts in increasing order and since it is returning a respomse, it has a promise
    .then(posts => res.json(posts))  // promises r handled using then. and response is stored as json object
    .catch(err => res.status(404).json({ nopostsfound: "No posts found" })); //if error occurs during functioncall, we handle it by catch
}); // if no respoinse comes,ie 404 case is encounntered, then no post found is returned in postman n frontend

// @route   GET api/posts/:id      // eg localhost3000/posts/uwhdiuqhiu   this will tell format of the url of the following route
// @desc    Get post by id  // to get particular id's post // every post has an id
// @access  Public
router.get("/:id", (req, res) => { //all routes that reuire an id have to start with a slash n colon
  Post.findById(req.params.id)   // req.params.id means that request has params as an attribute which further has id as an attribute
    .then(post => {
      if (post) {
        res.json(post);
      } else {
        res.status(404).json({ nopostfound: "No post found with that ID" });
      }
    })
    .catch(err =>
      res.status(404).json({ nopostfound: "No post found with that ID" })
    );
});

// @route   POST api/posts   // this is an http request just like GET or DELETE. It's url's format is api/posts
// @desc    Create post
// @access  Private
router.post(
  "/", /* we r not adding any specific url to this route bcos this post has to be displayed publically in post feed. if we add
  a particular url, then this post will be displayed only to us, and not to the other public. this is bcos everyone has a unique token 
  generated by login */
  passport.authenticate("jwt", { session: false }),   /* false is default parameter. session is set to false bcos during the verification
  of token, a time lag is not needed, that is why session is set to false */
  (req, res) => {
    const { errors, isValid } = validatePostInput(req.body);  /* destructuring assignment to get the errors and isvalid is a boolena
    variable. req.body receives text of comment*/

    // Check Validation
    if (!isValid) {
      // If any errors, send 400 with errors object
      return res.status(400).json(errors);
    }

    const newPost = new Post({
      text: req.body.text,   //creating new post as per the schema
      name: req.body.name,
      user: req.user.id
    });

    newPost.save().then(post => res.json(post));   //for savimg the new post, geting the response as json object. json object goes to postman
  }// post is now displayed in thepost feed
);

// @route   DELETE api/posts/:id    // deletes post of a given user. every user has a unique id
// @desc    Delete post
// @access  Private
router.delete(
  "/:id",   //since it a private route, we r giving it a unique url 
  passport.authenticate("jwt", { session: false }),
  (req, res) => {
    Profile.findOne({ user: req.user.id }).then(profile => {
      Post.findById(req.params.id)
        .then(post => {
          // Check for post owner
          if (post.user.toString() !== req.user.id) // checcking if the post beimg deleted is of the current user only {
            return res
              .status(401)
              .json({ notauthorized: "User not authorized" }); // anything withing json's curly bracket is the json object
          } // this json object's attribute is :'notauthorized'

          // Delete
          post.remove().then(() => res.json({ success: true }));
        })
        .catch(err => res.status(404).json({ postnotfound: "No post found" }));
    });
  }
);

// @route   POST api/posts/like/:id
// @desc    Like post
// @access  Private
router.post(
  "/like/:id",  // it is a pvt route cos it has an id
  passport.authenticate("jwt", { session: false }),
  (req, res) => {
    Profile.findOne({ user: req.user.id }).then(profile => { //req.user.id is id of user
      Post.findById(req.params.id)   //req's attribute are user n params both  //req.params.id is id of post
        .then(post => {
          if (
            post.likes.filter(like => like.user.toString() === req.user.id) //post.likes is an array of users who hv liked the post
              .length > 0    //if length of the filtered array is more than 0 means that user has already liked that post
          ) {
            return res
              .status(400)
              .json({ alreadyliked: "User already liked this post" });
          }

          // Add user id to likes array
          post.likes.unshift({ user: req.user.id });   //unshift adds to the beginning of array 

          post.save().then(post => res.json(post));  // upon save(), we get a promise. upon saving we get the updated post with new like
        })
        .catch(err => res.status(404).json({ postnotfound: "No post found" }));
    });
  }
);

// @route   POST api/posts/unlike/:id
// @desc    Unlike post
// @access  Private
router.post(
  "/unlike/:id",
  passport.authenticate("jwt", { session: false }),
  (req, res) => {
    Profile.findOne({ user: req.user.id }).then(profile => {
      Post.findById(req.params.id) // params.id means post id
        .then(post => {
          if (
            post.likes.filter(like => like.user.toString() === req.user.id)
              .length === 0
          ) {
            return res
              .status(400)
              .json({ notliked: "You have not yet liked this post" });
          }

          // Get remove index
          const removeIndex = post.likes
            .map(item => item.user.toString()) // finds index of the user id whose like is to be removed
            .indexOf(req.user.id);

          // Splice out of array
          post.likes.splice(removeIndex, 1); //removers user from the given index

          // Save
          post.save().then(post => res.json(post));
        })
        .catch(err => res.status(404).json({ postnotfound: "No post found" }));
    });
  }
);

// @route   POST api/posts/comment/:id
// @desc    Add comment to post
// @access  Private
router.post(
  "/comment/:id",
  passport.authenticate("jwt", { session: false }),
  (req, res) => {
    const { errors, isValid } = validatePostInput(req.body);

    // Check Validation
    if (!isValid) {
      // If any errors, send 400 with errors object
      return res.status(400).json(errors);
    }

    Post.findById(req.params.id) //req.params.id is the id of our post
      .then(post => {
        const newComment = {
          text: req.body.text,
          name: req.body.name,
          user: req.user.id
        };

        // Add to comments array
        post.comments.unshift(newComment);  //post.comments is an array 
      //unshift adds to the beginning of the array. new comment is added to the  =beginning

        // Save
        post.save().then(post => res.json(post)); // save gives a promise, the promise is handled by then using a json object
      })
      .catch(err => res.status(404).json({ postnotfound: "No post found" }));
  }
);

// @route   DELETE api/posts/comment/:id/:comment_id
// @desc    Remove comment from post
// @access  Private
router.delete(
  "/comment/:id/:comment_id",
  passport.authenticate("jwt", { session: false }),
  (req, res) => {
    Post.findById(req.params.id)
      .then(post => {
        // Check to see if comment exists
        if (
          post.comments.filter(
            comment => comment._id.toString() === req.params.comment_id
          ).length === 0
        ) {
          return res
            .status(404)
            .json({ commentnotexists: "Comment does not exist" });
        }

        // Get remove index
        const removeIndex = post.comments
          .map(item => item._id.toString())
          .indexOf(req.params.comment_id);

        // Splice comment out of array
        post.comments.splice(removeIndex, 1);

        post.save().then(post => res.json(post));
      })
      .catch(err => res.status(404).json({ postnotfound: "No post found" }));
  }
);

//export the router here router is an instance...all the get,post,delete requests have been configured in router
module.exports = router;  // we are exporting router using this line
